// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: mongodb_crud.proto

package grpc_utils

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MikananiMongoCrud_QueryAnime_FullMethodName  = "/mikanani_grpc_utils.MikananiMongoCrud/QueryAnime"
	MikananiMongoCrud_UpdateAnime_FullMethodName = "/mikanani_grpc_utils.MikananiMongoCrud/UpdateAnime"
	MikananiMongoCrud_DelAnime_FullMethodName    = "/mikanani_grpc_utils.MikananiMongoCrud/DelAnime"
)

// MikananiMongoCrudClient is the client API for MikananiMongoCrud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MikananiMongoCrudClient interface {
	QueryAnime(ctx context.Context, in *QueryAnimeRequest, opts ...grpc.CallOption) (*QueryAnimeResponse, error)
	UpdateAnime(ctx context.Context, in *UpdateAnimeRequest, opts ...grpc.CallOption) (*UpdateAnimeResponse, error)
	DelAnime(ctx context.Context, in *DelAnimeRequest, opts ...grpc.CallOption) (*DelAnimeResponse, error)
}

type mikananiMongoCrudClient struct {
	cc grpc.ClientConnInterface
}

func NewMikananiMongoCrudClient(cc grpc.ClientConnInterface) MikananiMongoCrudClient {
	return &mikananiMongoCrudClient{cc}
}

func (c *mikananiMongoCrudClient) QueryAnime(ctx context.Context, in *QueryAnimeRequest, opts ...grpc.CallOption) (*QueryAnimeResponse, error) {
	out := new(QueryAnimeResponse)
	err := c.cc.Invoke(ctx, MikananiMongoCrud_QueryAnime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mikananiMongoCrudClient) UpdateAnime(ctx context.Context, in *UpdateAnimeRequest, opts ...grpc.CallOption) (*UpdateAnimeResponse, error) {
	out := new(UpdateAnimeResponse)
	err := c.cc.Invoke(ctx, MikananiMongoCrud_UpdateAnime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mikananiMongoCrudClient) DelAnime(ctx context.Context, in *DelAnimeRequest, opts ...grpc.CallOption) (*DelAnimeResponse, error) {
	out := new(DelAnimeResponse)
	err := c.cc.Invoke(ctx, MikananiMongoCrud_DelAnime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MikananiMongoCrudServer is the server API for MikananiMongoCrud service.
// All implementations must embed UnimplementedMikananiMongoCrudServer
// for forward compatibility
type MikananiMongoCrudServer interface {
	QueryAnime(context.Context, *QueryAnimeRequest) (*QueryAnimeResponse, error)
	UpdateAnime(context.Context, *UpdateAnimeRequest) (*UpdateAnimeResponse, error)
	DelAnime(context.Context, *DelAnimeRequest) (*DelAnimeResponse, error)
	mustEmbedUnimplementedMikananiMongoCrudServer()
}

// UnimplementedMikananiMongoCrudServer must be embedded to have forward compatible implementations.
type UnimplementedMikananiMongoCrudServer struct {
}

func (UnimplementedMikananiMongoCrudServer) QueryAnime(context.Context, *QueryAnimeRequest) (*QueryAnimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAnime not implemented")
}
func (UnimplementedMikananiMongoCrudServer) UpdateAnime(context.Context, *UpdateAnimeRequest) (*UpdateAnimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnime not implemented")
}
func (UnimplementedMikananiMongoCrudServer) DelAnime(context.Context, *DelAnimeRequest) (*DelAnimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAnime not implemented")
}
func (UnimplementedMikananiMongoCrudServer) mustEmbedUnimplementedMikananiMongoCrudServer() {}

// UnsafeMikananiMongoCrudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MikananiMongoCrudServer will
// result in compilation errors.
type UnsafeMikananiMongoCrudServer interface {
	mustEmbedUnimplementedMikananiMongoCrudServer()
}

func RegisterMikananiMongoCrudServer(s grpc.ServiceRegistrar, srv MikananiMongoCrudServer) {
	s.RegisterService(&MikananiMongoCrud_ServiceDesc, srv)
}

func _MikananiMongoCrud_QueryAnime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAnimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MikananiMongoCrudServer).QueryAnime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MikananiMongoCrud_QueryAnime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MikananiMongoCrudServer).QueryAnime(ctx, req.(*QueryAnimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MikananiMongoCrud_UpdateAnime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MikananiMongoCrudServer).UpdateAnime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MikananiMongoCrud_UpdateAnime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MikananiMongoCrudServer).UpdateAnime(ctx, req.(*UpdateAnimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MikananiMongoCrud_DelAnime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAnimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MikananiMongoCrudServer).DelAnime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MikananiMongoCrud_DelAnime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MikananiMongoCrudServer).DelAnime(ctx, req.(*DelAnimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MikananiMongoCrud_ServiceDesc is the grpc.ServiceDesc for MikananiMongoCrud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MikananiMongoCrud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mikanani_grpc_utils.MikananiMongoCrud",
	HandlerType: (*MikananiMongoCrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryAnime",
			Handler:    _MikananiMongoCrud_QueryAnime_Handler,
		},
		{
			MethodName: "UpdateAnime",
			Handler:    _MikananiMongoCrud_UpdateAnime_Handler,
		},
		{
			MethodName: "DelAnime",
			Handler:    _MikananiMongoCrud_DelAnime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mongodb_crud.proto",
}
